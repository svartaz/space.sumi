html
  head
    script.
      const primes = [2, 3, 5, 7, 11];

      const audioContext = new (window.AudioContext ||
        window.webkitAudioContext)();

      document.addEventListener("DOMContentLoaded", () => {
        const oscillators = [];

        const canvas = document.querySelector("canvas");
        const canvasContext = canvas.getContext("2d");
        canvasContext.imageSmoothingEnabled = false;

        const height = 12;
        const asY = (number) =>
          canvas.height * (1 / 2 - Math.log2(number) / height);

        const defaultCanvas = () => {
          canvasContext.fillStyle = "white";
          canvasContext.fillRect(0, 0, canvas.width, canvas.height);

          for (let e = -height / 2 + 1; e < height / 2; e++) {
            canvasContext.lineWidth = 1;
            canvasContext.strokeStyle = "lightgray";
            canvasContext.moveTo(0, asY(Math.pow(2, e)));
            canvasContext.lineTo(canvas.width, asY(Math.pow(2, e)));
            canvasContext.stroke();
          }
        };

        const widthBar = canvas.width / 96;
        const onInput = () => {
          // reset
          while (oscillators.length) oscillators.pop().stop();
          defaultCanvas();

          for (const tr of document.querySelectorAll("tbody > tr")) {
            const [checkbox, ...inputs] = tr.querySelectorAll("input");
            const exponents = inputs.slice(0, -1).map((it) => it.valueAsNumber);

            let index = 0;
            let product = 1;
            let x =
              (canvas.width * tr.rowIndex) /
              (tr.parentElement.children.length + 1);

            if (exponents.every((it) => it === 0)) {
              canvasContext.beginPath();
              canvasContext.arc(
                x + widthBar / 2,
                asY(1),
                widthBar / 2,
                0,
                2 * Math.PI
              );
              canvasContext.fillStyle = checkbox.checked ? "gray" : "lightgray";
              canvasContext.fill();
            }

            while (index < primes.length) {
              if (exponents[index] === 0) {
                index++;
                continue;
              }

              let productNew = product;
              const direction = exponents[index] < 0 ? "down" : "up";
              if (direction === "down") {
                productNew /= primes[index];
                exponents[index]++;
              } else {
                productNew *= primes[index];
                exponents[index]--;
              }

              canvasContext.fillStyle =
                index === 0
                  ? checkbox.checked
                    ? "gray"
                    : "lightgray"
                  : `hsl(${
                    (360 * (index - 1)) / (primes.length - 1)
                    }deg 100% 50% / ${checkbox.checked ? 1 : 1 / 4})`;
              canvasContext.fillRect(
                x,
                asY(product),
                widthBar,
                asY(productNew) - asY(product)
              );

              x += widthBar + 1;
              product = productNew;
            }

            tr.querySelector("td:nth-last-child(3)").textContent = parseFloat(
              product.toFixed(3)
            );
            tr.querySelector("td:nth-last-child(2)").textContent = parseFloat(
              Math.log2(product).toFixed(3)
            );

            if (!checkbox.checked) continue;

            const o = audioContext.createOscillator();
            o.type = "sine";
            o.frequency.value =
              document.querySelector("#hz").valueAsNumber * product;

            const gain = audioContext.createGain();
            gain.gain.value =
              1 /
              (document.querySelectorAll("input[type='checkbox']").length + 1);
            gain.connect(audioContext.destination);
            o.connect(gain);
            o.start();

            oscillators.push(o);
          }
        };

        for (const input of document.querySelectorAll(
          "input:not([type='button'])"
        ))
          input.addEventListener("input", onInput);

        for (const buttonReset of document.querySelectorAll(
          "input[type='button'][value='reset']"
        )) {
          buttonReset.addEventListener("click", (event) => {
            for (const input of event.target.parentElement.parentElement.querySelectorAll(
              "input:not([type='button'])"
            ))
              input.value = 0;

            onInput();
          });
        }

        document
          .querySelector("input[type='button'][value='reset all']")
          .addEventListener("click", () => {
            for (const input of document.querySelectorAll("input[step='1']"))
              input.value = 0;

            onInput();
          });

        document
          .querySelector("input[type='button'][value='stop all']")
          .addEventListener("click", () => {
            for (const input of document.querySelectorAll(
              "input[type='checkbox']"
            ))
              input.checked = false;

            onInput();
          });

        onInput();
      });

    style.
      * {
        box-sizing: border-box;
      }

      html,
      body {
        inline-size: 100%;
        block-size: 100%;
      }

      body {
        font-family: sans-serif;
        display: flex;
        flex-direction: column;
        gap: 1rem;
        align-items: center;
        justify-content: space-evenly;
      }

      canvas {
        border: 1px solid black;
        margin: 0 auto;
      }

      table {
        inline-size: fit-content;
        block-size: fit-content;
      }

      input[type="number"] {
        inline-size: 3em;
      }

      input#hz {
        inline-size: 5em;
      }

  body
    canvas(width="900" height="600")

    table
      thead
        tr
          td
            input#hz(type="number" step="0.001" value="110")
            |Hz
          td: input(type="button" value="stop all")
          th 2^
          th 3^
          th 5^
          th 7^
          th 11^
          th prod
          th log2
          td
            input(type="button" value="reset all")
      tbody
        each exponents, i in [[1,0,0,0,0], [0,1,0,0,0], [-1,0,1,0,0], [-2,1,1,0,0,], [-1,2,0,0,0]]
          tr
            th note #{i}
            td: input(type="checkbox")
            each exponent in exponents
              td: input(type="number" step="1" max="9" value=exponent)
            td 1
            td 0
            td: input(type="button" value="reset")
